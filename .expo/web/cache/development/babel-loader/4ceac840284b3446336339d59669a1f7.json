{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedEvent from \"./AnimatedEvent\";\nimport { createOrReuseStyleNode } from \"./AnimatedStyle\";\nimport invariant from 'fbjs/lib/invariant';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport { val } from \"../val\";\n\nfunction sanitizeProps(inputProps) {\n  var props = {};\n\n  for (var key in inputProps) {\n    var value = inputProps[key];\n\n    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {\n      props[key] = value.__nodeID;\n    }\n  }\n\n  return props;\n}\n\nexport function createOrReusePropsNode(props, callback, oldNode) {\n  if (props.style) {\n    props = _objectSpread(_objectSpread({}, props), {}, {\n      style: createOrReuseStyleNode(props.style, oldNode && oldNode._props.style)\n    });\n  }\n\n  var config = sanitizeProps(props);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedProps(props, config, callback);\n}\n\nvar AnimatedProps = function (_AnimatedNode) {\n  _inherits(AnimatedProps, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedProps);\n\n  function AnimatedProps(props, config, callback) {\n    var _this;\n\n    _classCallCheck(this, AnimatedProps);\n\n    _this = _super.call(this, {\n      type: 'props',\n      props: config\n    }, Object.values(props).filter(function (n) {\n      return !(n instanceof AnimatedEvent);\n    }));\n    _this._config = config;\n    _this._props = props;\n    _this._callback = callback;\n\n    _this.__attach();\n\n    return _this;\n  }\n\n  _createClass(AnimatedProps, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedProps, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var props = {};\n\n      for (var key in this._props) {\n        var value = this._props[key];\n\n        if (value instanceof AnimatedNode) {\n          props[key] = value.__getValue();\n        }\n      }\n\n      return props;\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n\n      this._disconnectAnimatedView(nativeViewTag);\n\n      _get(_getPrototypeOf(AnimatedProps.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this._callback();\n\n      if (!this._animatedView) {\n        return;\n      }\n\n      val(this);\n    }\n  }, {\n    key: \"setNativeView\",\n    value: function setNativeView(animatedView) {\n      if (this._animatedView === animatedView) {\n        return;\n      }\n\n      this._animatedView = animatedView;\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n\n      this._connectAnimatedView(nativeViewTag);\n    }\n  }]);\n\n  return AnimatedProps;\n}(AnimatedNode);","map":{"version":3,"sources":["AnimatedProps.js"],"names":["props","value","inputProps","style","createOrReuseStyleNode","oldNode","config","sanitizeProps","deepEqual","constructor","type","Object","n","toString","__onEvaluate","__detach","nativeViewTag","findNodeHandle","invariant","update","val","setNativeView"],"mappings":"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","sourcesContent":["import { findNodeHandle } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedEvent from './AnimatedEvent';\nimport { createOrReuseStyleNode } from './AnimatedStyle';\n\nimport invariant from 'fbjs/lib/invariant';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport { val } from '../val';\n\nfunction sanitizeProps(inputProps) {\n  const props = {};\n  for (const key in inputProps) {\n    const value = inputProps[key];\n    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {\n      props[key] = value.__nodeID;\n    }\n  }\n  return props;\n}\n\nexport function createOrReusePropsNode(props, callback, oldNode) {\n  if (props.style) {\n    props = {\n      ...props,\n      style: createOrReuseStyleNode(\n        props.style,\n        oldNode && oldNode._props.style\n      ),\n    };\n  }\n  const config = sanitizeProps(props);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedProps(props, config, callback);\n}\n\nclass AnimatedProps extends AnimatedNode {\n  constructor(props, config, callback) {\n    super(\n      { type: 'props', props: config },\n      Object.values(props).filter(n => !(n instanceof AnimatedEvent))\n    );\n    this._config = config;\n    this._props = props;\n    this._callback = callback;\n    this.__attach();\n  }\n\n  toString() {\n    return `AnimatedProps, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const props = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getValue();\n      }\n    }\n    return props;\n  }\n\n  __detach() {\n    const nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree'\n    );\n    this._disconnectAnimatedView(nativeViewTag);\n    super.__detach();\n  }\n\n  update() {\n    this._callback();\n\n    if (!this._animatedView) {\n      return;\n    }\n\n    val(this);\n  }\n\n  setNativeView(animatedView) {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n    this._animatedView = animatedView;\n\n    const nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree'\n    );\n    this._connectAnimatedView(nativeViewTag);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}