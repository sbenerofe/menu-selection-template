{"ast":null,"code":"import AnimatedValue from \"../core/InternalAnimatedValue\";\nimport { createAnimatedSet as set } from \"../core/AnimatedSet\";\nimport { createAnimatedCall as call } from \"../core/AnimatedCall\";\nimport { createAnimatedAlways as always } from \"../core/AnimatedAlways\";\nimport { createAnimatedCond as cond } from \"../core/AnimatedCond\";\nexport function evaluateOnce(node) {\n  var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var callback = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  var done = new AnimatedValue(0);\n  var evalNode = cond(done, 0, call([node, set(done, 1)], function () {\n    callback && callback();\n\n    for (var i = 0; i < input.length; i++) {\n      input[i].__removeChild(alwaysNode);\n\n      alwaysNode.__detach();\n    }\n  }));\n  var alwaysNode = always(evalNode);\n\n  for (var i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n\n    alwaysNode.__attach();\n  }\n}","map":{"version":3,"sources":["evaluateOnce.js"],"names":["createAnimatedSet","createAnimatedCall","createAnimatedAlways","createAnimatedCond","input","Array","done","evalNode","cond","call","set","callback","i","alwaysNode","always"],"mappings":"AAAA,OAAA,aAAA;AACA,SAASA,iBAAiB,IAA1B,GAAA;AACA,SAASC,kBAAkB,IAA3B,IAAA;AACA,SAASC,oBAAoB,IAA7B,MAAA;AACA,SAASC,kBAAkB,IAA3B,IAAA;AASA,OAAO,SAAA,YAAA,CAAA,IAAA,EAAkD;EAAA,IAAtBC,KAAsB,uEAAlD,EAAkD;EAAA,IAAlD,QAAkD;;EACvD,IAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,KAAKA,CAAL,EAA2B;IACzBD,KAAK,GAAG,CAARA,KAAQ,CAARA;EACD;;EACD,IAAME,IAAI,GAAG,IAAA,aAAA,CAAb,CAAa,CAAb;EACA,IAAMC,QAAQ,GAAGC,IAAI,CAAA,IAAA,EAAA,CAAA,EAGnBC,IAAI,CAAC,CAAA,IAAA,EAAOC,GAAG,CAAA,IAAA,EAAX,CAAW,CAAV,CAAD,EAAuB,YAAM;IAC/BC,QAAQ,IAAIA,QAAZA,EAAAA;;IACA,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGR,KAAK,CAAzB,MAAA,EAAkCQ,CAAlC,EAAA,EAAuC;MACrCR,KAAK,CAALA,CAAK,CAALA,CAAAA,aAAAA,CAAAA,UAAAA;;MACAS,UAAU,CAAVA,QAAAA;IACD;EARL,CAGM,CAHe,CAArB;EAWA,IAAMA,UAAU,GAAGC,MAAM,CAAzB,QAAyB,CAAzB;;EACA,KAAK,IAAIF,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGR,KAAK,CAAzB,MAAA,EAAkCQ,CAAlC,EAAA,EAAuC;IACrCR,KAAK,CAALA,CAAK,CAALA,CAAAA,UAAAA,CAAAA,UAAAA;;IACAS,UAAU,CAAVA,QAAAA;EACD;AACF","sourcesContent":["import AnimatedValue from '../core/InternalAnimatedValue';\nimport { createAnimatedSet as set } from '../core/AnimatedSet';\nimport { createAnimatedCall as call } from '../core/AnimatedCall';\nimport { createAnimatedAlways as always } from '../core/AnimatedAlways';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\n\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param input - nodes (or one node) representing values which states input for node.\n * @param callback - after callback\n */\n\nexport function evaluateOnce(node, input = [], callback) {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  const done = new AnimatedValue(0);\n  const evalNode = cond(\n    done,\n    0,\n    call([node, set(done, 1)], () => {\n      callback && callback();\n      for (let i = 0; i < input.length; i++) {\n        input[i].__removeChild(alwaysNode);\n        alwaysNode.__detach();\n      }\n    })\n  );\n  const alwaysNode = always(evalNode);\n  for (let i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n    alwaysNode.__attach();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}