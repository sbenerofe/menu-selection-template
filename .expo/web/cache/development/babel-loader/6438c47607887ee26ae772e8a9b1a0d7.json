{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/construct\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createAnimatedCallFunc } from \"./AnimatedCallFunc\";\nimport { createAnimatedParam } from \"./AnimatedParam\";\nimport { val } from \"../val\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar AnimatedFunction = function (_AnimatedNode) {\n  _inherits(AnimatedFunction, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedFunction);\n\n  function AnimatedFunction(what) {\n    var _this;\n\n    _classCallCheck(this, AnimatedFunction);\n\n    invariant(what instanceof AnimatedNode, \"Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got \".concat(what));\n\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    _this = _super.call(this, {\n      type: 'func',\n      what: what\n    }, [what].concat(params));\n\n    _defineProperty(_assertThisInitialized(_this), \"_what\", void 0);\n\n    _this._what = what;\n\n    _this.__attach();\n\n    return _this;\n  }\n\n  _createClass(AnimatedFunction, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return val(this._what);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedFunction, id: \".concat(this.__nodeID);\n    }\n  }]);\n\n  return AnimatedFunction;\n}(AnimatedNode);\n\nexport function createAnimatedFunction(cb) {\n  var params = new Array(cb.length);\n\n  for (var i = 0; i < params.length; i++) {\n    params[i] = createAnimatedParam();\n  }\n\n  var what = cb.apply(void 0, params);\n\n  var func = _construct(AnimatedFunction, [what].concat(params));\n\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (args.length !== params.length) {\n      throw new Error('Parameter mismatch when calling reanimated function. Expected ' + params.length + ' parameters, got ' + args.length + '.');\n    }\n\n    return createAnimatedCallFunc(func, args, params);\n  };\n}","map":{"version":3,"sources":["AnimatedFunction.js"],"names":["constructor","invariant","what","type","__onEvaluate","val","toString","params","cb","i","createAnimatedParam","func","args","createAnimatedCallFunc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,YAAA;AACA,SAAA,sBAAA;AACA,SAAA,mBAAA;AACA,SAAA,GAAA;AACA,OAAA,SAAA,MAAA,oBAAA;;IAEA,gB;;;;;EAGEA,0BAAW,IAAXA,EAA6B;IAAA;;IAAA;;IAC3BC,SAAS,CACPC,IAAI,YADG,YAAA,EAAA,uFAAA,MAAA,CAATD,IAAS,CAAA,CAATA;;IAD2B,kCAAlB,MAAkB;MAAlB,MAAkB;IAAA;;IAK3B,0BACE;MACEE,IAAI,EADN,MAAA;MAEED,IAAAA,EAAAA;IAFF,CADF,GAKE,IALF,SAAA,MAAA;;IAL2B,eAAA,gCAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;IAY3B,MAAA,KAAA,GAAA,IAAA;;IACA,MAAA,QAAA;;IAb2B;EAc5B;;;;WAEDE,wBAAe;MACb,OAAOC,GAAG,CAAC,KAAX,KAAU,CAAV;IACD;;;WAEDC,oBAAW;MACT,OAAA,yBAAA,MAAA,CAAgC,KAAhC,QAAA,CAAA;IACD;;;;EAzBH,Y;;AA4BA,OAAO,SAAA,sBAAA,CAAA,EAAA,EAAoC;EACzC,IAAMC,MAAM,GAAG,IAAA,KAAA,CAAUC,EAAE,CAA3B,MAAe,CAAf;;EACA,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,MAAM,CAA1B,MAAA,EAAmCE,CAAnC,EAAA,EAAwC;IACtCF,MAAM,CAANA,CAAM,CAANA,GAAYG,mBAAZH,EAAAA;EAHuC;;EAMzC,IAAML,IAAI,GAAGM,EAAE,MAAFA,SAAb,MAAaA,CAAb;;EACA,IAAMG,IAAI,cAAG,gBAAH,GAAG,IAAH,SAAV,MAAU,EAAV;;EACA,OAAO,YAAa;IAAA,mCAAb,IAAa;MAAb,IAAa;IAAA;;IAClB,IAAIC,IAAI,CAAJA,MAAAA,KAAgBL,MAAM,CAA1B,MAAA,EAAmC;MACjC,MAAM,IAAA,KAAA,CACJ,mEACEA,MAAM,CADR,MAAA,GAAA,mBAAA,GAGEK,IAAI,CAHN,MAAA,GADF,GAAM,CAAN;IAOD;;IACD,OAAOC,sBAAsB,CAAA,IAAA,EAAA,IAAA,EAA7B,MAA6B,CAA7B;EAVF,CAAA;AAYD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { createAnimatedCallFunc } from './AnimatedCallFunc';\nimport { createAnimatedParam } from './AnimatedParam';\nimport { val } from '../val';\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedFunction extends AnimatedNode {\n  _what;\n\n  constructor(what, ...params) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`\n    );\n    super(\n      {\n        type: 'func',\n        what,\n      },\n      [what, ...params]\n    );\n    this._what = what;\n    this.__attach();\n  }\n\n  __onEvaluate() {\n    return val(this._what);\n  }\n\n  toString() {\n    return `AnimatedFunction, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedFunction(cb) {\n  const params = new Array(cb.length);\n  for (let i = 0; i < params.length; i++) {\n    params[i] = createAnimatedParam();\n  }\n  // eslint-disable-next-line standard/no-callback-literal\n  const what = cb(...params);\n  const func = new AnimatedFunction(what, ...params);\n  return (...args) => {\n    if (args.length !== params.length) {\n      throw new Error(\n        'Parameter mismatch when calling reanimated function. Expected ' +\n          params.length +\n          ' parameters, got ' +\n          args.length +\n          '.'\n      );\n    }\n    return createAnimatedCallFunc(func, args, params);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}