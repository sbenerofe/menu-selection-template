{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport InternalAnimatedValue from \"./InternalAnimatedValue\";\n\nvar AnimatedBlock = function (_AnimatedNode) {\n  _inherits(AnimatedBlock, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedBlock);\n\n  function AnimatedBlock(array) {\n    var _this;\n\n    _classCallCheck(this, AnimatedBlock);\n\n    invariant(array.every(function (el) {\n      return el instanceof AnimatedNode;\n    }), \"Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes\");\n    _this = _super.call(this, {\n      type: 'block',\n      block: array\n    }, array);\n\n    _defineProperty(_assertThisInitialized(_this), \"_array\", void 0);\n\n    _this._array = array;\n    return _this;\n  }\n\n  _createClass(AnimatedBlock, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedBlock, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var result;\n\n      this._array.forEach(function (node) {\n        result = val(node);\n      });\n\n      return result;\n    }\n  }]);\n\n  return AnimatedBlock;\n}(AnimatedNode);\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && (v === null || v === void 0 ? void 0 : v.__isProxy)) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n\n    return v.__val;\n  }\n\n  return v instanceof AnimatedNode ? v : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v) ? new AnimatedBlock(v.map(function (node) {\n    return adapt(node);\n  })) : nodify(v);\n}","map":{"version":3,"sources":["AnimatedBlock.js"],"names":["constructor","invariant","array","el","type","block","toString","__onEvaluate","node","result","val","adapt","v","InternalAnimatedValue","Array","nodify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,SAAA,MAAA,oBAAA;AACA,SAAA,GAAA;AACA,OAAA,YAAA;AACA,OAAA,qBAAA;;IAEA,a;;;;;EAGEA,uBAAW,KAAXA,EAAmB;IAAA;;IAAA;;IACjBC,SAAS,CACPC,KAAK,CAALA,KAAAA,CAAYC,UAAAA,EAAE;MAAA,OAAIA,EAAE,YADb,YACO;IAAA,CAAdD,CADO,EAATD,2IAAS,CAATA;IAIA,0BAAM;MAAEG,IAAI,EAAN,OAAA;MAAiBC,KAAK,EAAEH;IAAxB,CAAN,EAAA,KAAA;;IALiB,eAAA,gCAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;IAMjB,MAAA,MAAA,GAAA,KAAA;IANiB;EAOlB;;;;WAEDI,oBAAW;MACT,OAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;IACD;;;WAEDC,wBAAe;MACb,IAAA,MAAA;;MACA,KAAA,MAAA,CAAA,OAAA,CAAoBC,UAAAA,IAAI,EAAI;QAC1BC,MAAM,GAAGC,GAAG,CAAZD,IAAY,CAAZA;MADF,CAAA;;MAGA,OAAA,MAAA;IACD;;;;EAtBH,Y;;AAyBA,OAAO,SAAA,mBAAA,CAAA,KAAA,EAAoC;EACzC,OAAOE,KAAK,CAAZ,KAAY,CAAZ;AACD;;AAED,SAAA,MAAA,CAAA,CAAA,EAAmB;EACjB,IAAI,OAAA,CAAA,KAAA,QAAA,KAAyBC,CAAzB,KAAA,IAAyBA,IAAAA,CAAzB,KAAA,KAAA,CAAyBA,GAAzB,KAAA,CAAyBA,GAAAA,CAAC,CAA9B,SAAI,CAAJ,EAA2C;IACzC,IAAI,CAACA,CAAC,CAAN,KAAA,EAAc;MACZA,CAAC,CAADA,KAAAA,GAAU,IAAA,qBAAA,CAAVA,CAAU,CAAVA;IACD;;IACD,OAAOA,CAAC,CAAR,KAAA;EALe;;EAQjB,OAAOA,CAAC,YAADA,YAAAA,GAAAA,CAAAA,GAEHC,qBAAqB,CAArBA,gBAAAA,CAFJ,CAEIA,CAFJ;AAGD;;AAED,OAAO,SAAA,KAAA,CAAA,CAAA,EAAkB;EACvB,OAAOC,KAAK,CAALA,OAAAA,CAAAA,CAAAA,IACH,IAAA,aAAA,CAAkBF,CAAC,CAADA,GAAAA,CAAMJ,UAAAA,IAAI;IAAA,OAAIG,KAAK,CADlCG,IACkC,CAAT;EAAA,CAAVF,CAAlB,CADGE,GAEHC,MAAM,CAFV,CAEU,CAFV;AAGD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    invariant(\n      array.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'block', block: array }, array);\n    this._array = array;\n  }\n\n  toString() {\n    return `AnimatedBlock, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach(node => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v?.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n"]},"metadata":{},"sourceType":"module"}